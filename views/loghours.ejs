<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" type="text/css" href="css/dropdown.css" />
</head>

<body>

    
  <h2 id="residentname"><%= resident %></h2>
    log your hours
    <form id ="loghourform"autocomplete="off" method="POST" action="/protected-route">
        Resident:<br>
        
        <div class="autocomplete" style="width:300px;">
          <input id="myInput" type="text" name="residentname" placeholder="ResidentName">
        </div>
        <br>
        <label for="activity_genre">Activity_Genre:</label>
        <select id="cars" name="activity_genre">
          <option value="volvo">Volvo</option>
          <option value="saab">Saab</option>
          <option value="fiat">Fiat</option>
          <option value="audi">Audi</option>
        </select>
        <br>
        Activity Description:<br>
        <input type="text" name="activity_description">
        <br>
        <label for="outcome_genre">Outcome_Genre:</label>
        <select id="cars" name="outcome_genre">
          <option value="active engagement">active engagement</option>
          <option value="pasive engagement">pasive engagement</option>
          <option value="nil">nil</option>
        
        </select>
        <br>
        Outcome Description<br>
        <input type="text" name="outcome_description"><br>
        <br>
        Duration<br>
        <input type="number" name="Duration"><br>
        <br>
        Date<br>
        <input type="date" name="date"><br>
        <br>
        Personresponsible<br>
        <input type="text" value=<%= user._id %> name="Personresponsible"><br>
        <br>
        resident id <br>
        <input id="resident_id"type="text"  name="residentid"><br>
        <br>
        
    
    </form>
    <button onclick="submitform()"> submit</button>

    
</body>

<script>

  var residentlist= document.getElementById('residentname')
  var allresidentkeyvalue = JSON.parse(residentlist.innerText);
  console.log(allresidentkeyvalue)

  var onlyname= []
  for(i=0;i<allresidentkeyvalue.length;i++){
    onlyname.push(allresidentkeyvalue[i].residentname)
  }
  console.log(onlyname)
  //after the user hit log in form
  function submitform(){
    console.log("hi")
    var nameonform= document.getElementById("myInput")
    console.log(nameonform.value)
    var nameonform=nameonform.value
    
  let index= onlyname.indexOf(nameonform)
  console.log(index)
  var residentid= allresidentkeyvalue[index]._id
  //populate on the form
  var formresidentid = document.getElementById("resident_id")
  formresidentid.value=residentid

  form=document.getElementById("loghourform")

  if(formresidentid.value!=null){
    form.submit();

  }
  else{
    console.log("fail")
  }
  



  }
 




  ///////////////////////////////////////

  //fucntionality 
  function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
      x[i].parentNode.removeChild(x[i]);
    }
  }
}
/*execute a function when someone clicks in the document:*/
document.addEventListener("click", function (e) {
    closeAllLists(e.target);
});
}

autocomplete(document.getElementById("myInput"), onlyname);

</script>
</html>